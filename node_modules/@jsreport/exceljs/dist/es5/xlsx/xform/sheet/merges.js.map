{"version":3,"file":"merges.js","names":["_","require","Range","colCache","Enums","Merges","constructor","merges","add","merge","master","expandToAddress","address","range","concat","mergeCells","map","reconcile","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","getMasterAddress","hash","module","exports"],"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"sourcesContent":["const _ = require('../../../utils/under-dash');\n\nconst Range = require('../../../doc/range');\nconst colCache = require('../../../utils/col-cache');\nconst Enums = require('../../../doc/enums');\n\nclass Merges {\n  constructor() {\n    // optional mergeCells is array of ranges (like the xml)\n    this.merges = {};\n  }\n\n  add(merge) {\n    // merge is {address, master}\n    if (this.merges[merge.master]) {\n      this.merges[merge.master].expandToAddress(merge.address);\n    } else {\n      const range = `${merge.master}:${merge.address}`;\n      this.merges[merge.master] = new Range(range);\n    }\n  }\n\n  get mergeCells() {\n    return _.map(this.merges, merge => merge.range);\n  }\n\n  reconcile(mergeCells, rows) {\n    // reconcile merge list with merge cells\n    _.each(mergeCells, merge => {\n      const dimensions = colCache.decode(merge);\n      for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n        const row = rows[i - 1];\n        for (let j = dimensions.left; j <= dimensions.right; j++) {\n          const cell = row.cells[j - 1];\n          if (!cell) {\n            // nulls are not included in document - so if master cell has no value - add a null one here\n            row.cells[j] = {\n              type: Enums.ValueType.Null,\n              address: colCache.encodeAddress(i, j),\n            };\n          } else if (cell.type === Enums.ValueType.Merge) {\n            cell.master = dimensions.tl;\n          }\n        }\n      }\n    });\n  }\n\n  getMasterAddress(address) {\n    // if address has been merged, return its master's address. Assumes reconcile has been called\n    const range = this.hash[address];\n    return range && range.tl;\n  }\n}\n\nmodule.exports = Merges;\n"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAE9C,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,MAAME,QAAQ,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpD,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAE3C,MAAMI,MAAM,CAAC;EACXC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAClB;EAEAC,GAAGA,CAACC,KAAK,EAAE;IACT;IACA,IAAI,IAAI,CAACF,MAAM,CAACE,KAAK,CAACC,MAAM,CAAC,EAAE;MAC7B,IAAI,CAACH,MAAM,CAACE,KAAK,CAACC,MAAM,CAAC,CAACC,eAAe,CAACF,KAAK,CAACG,OAAO,CAAC;IAC1D,CAAC,MAAM;MACL,MAAMC,KAAK,MAAAC,MAAA,CAAML,KAAK,CAACC,MAAM,OAAAI,MAAA,CAAIL,KAAK,CAACG,OAAO,CAAE;MAChD,IAAI,CAACL,MAAM,CAACE,KAAK,CAACC,MAAM,CAAC,GAAG,IAAIR,KAAK,CAACW,KAAK,CAAC;IAC9C;EACF;EAEA,IAAIE,UAAUA,CAAA,EAAG;IACf,OAAOf,CAAC,CAACgB,GAAG,CAAC,IAAI,CAACT,MAAM,EAAEE,KAAK,IAAIA,KAAK,CAACI,KAAK,CAAC;EACjD;EAEAI,SAASA,CAACF,UAAU,EAAEG,IAAI,EAAE;IAC1B;IACAlB,CAAC,CAACmB,IAAI,CAACJ,UAAU,EAAEN,KAAK,IAAI;MAC1B,MAAMW,UAAU,GAAGjB,QAAQ,CAACkB,MAAM,CAACZ,KAAK,CAAC;MACzC,KAAK,IAAIa,CAAC,GAAGF,UAAU,CAACG,GAAG,EAAED,CAAC,IAAIF,UAAU,CAACI,MAAM,EAAEF,CAAC,EAAE,EAAE;QACxD,MAAMG,GAAG,GAAGP,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;QACvB,KAAK,IAAII,CAAC,GAAGN,UAAU,CAACO,IAAI,EAAED,CAAC,IAAIN,UAAU,CAACQ,KAAK,EAAEF,CAAC,EAAE,EAAE;UACxD,MAAMG,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC;UAC7B,IAAI,CAACG,IAAI,EAAE;YACT;YACAJ,GAAG,CAACK,KAAK,CAACJ,CAAC,CAAC,GAAG;cACbK,IAAI,EAAE3B,KAAK,CAAC4B,SAAS,CAACC,IAAI;cAC1BrB,OAAO,EAAET,QAAQ,CAAC+B,aAAa,CAACZ,CAAC,EAAEI,CAAC;YACtC,CAAC;UACH,CAAC,MAAM,IAAIG,IAAI,CAACE,IAAI,KAAK3B,KAAK,CAAC4B,SAAS,CAACG,KAAK,EAAE;YAC9CN,IAAI,CAACnB,MAAM,GAAGU,UAAU,CAACgB,EAAE;UAC7B;QACF;MACF;IACF,CAAC,CAAC;EACJ;EAEAC,gBAAgBA,CAACzB,OAAO,EAAE;IACxB;IACA,MAAMC,KAAK,GAAG,IAAI,CAACyB,IAAI,CAAC1B,OAAO,CAAC;IAChC,OAAOC,KAAK,IAAIA,KAAK,CAACuB,EAAE;EAC1B;AACF;AAEAG,MAAM,CAACC,OAAO,GAAGnC,MAAM","ignoreList":[]}